---
- name: "Create ArgoCD application to install the ODF Operator"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: odf-operator
        namespace: openshift-gitops
      spec:
        project: default
        source: { repoURL: "{{ gitops_repo }}", targetRevision: main, path: apps/odf-operator/overlays/dev }
        destination: { server: https://kubernetes.default.svc }
        syncPolicy: { automated: { prune: true, selfHeal: true }, syncOptions: [ "CreateNamespace=true" ] }

- name: "Wait for the successful installation of ODF Operator"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: openshift-storage
    label_selectors:
      - "operators.coreos.com/odf-operator.openshift-storage"
  register: odf_csv_info
  until: >
    odf_csv_info.resources is defined and
    odf_csv_info.resources | length > 0 and
    odf_csv_info.resources[0].status.phase == 'Succeeded'
  retries: 60
  delay: 10
  changed_when: false

- name: "Get all cluster nodes"
  kubernetes.core.k8s_info:
    kind: Node
  register: all_nodes

- name: "ODF nodes (SNO or Multi-Node)"
  ansible.builtin.set_fact:
    odf_target_nodes: "{{ all_nodes.resources if (all_nodes.resources | length) == 1 else (all_nodes.resources | selectattr('metadata.labels.\"node-role.kubernetes.io/worker\"', 'defined')) | list }}"

- name: "Label destination nodes for ODF"
  ansible.builtin.command: >
    oc label node {{ item.metadata.name }} cluster.ocs.openshift.io/openshift-storage='' --overwrite
  loop: "{{ odf_target_nodes }}"
  loop_control:
    loop_var: item
  register: label_result
  changed_when: "'labeled' in label_result.stdout"

- name: "Create ArgoCD application for ODF MCG instance (StorageSystem)"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: odf-mcg-instance
        namespace: openshift-gitops
      spec:
        project: default
        source: { repoURL: "{{ gitops_repo }}", targetRevision: main, path: apps/odf-mcg/overlays/dev }
        destination: { server: https://kubernetes.default.svc }
        syncPolicy: { automated: { prune: true, selfHeal: true } }
        ignoreDifferences:
        - group: ocs.openshift.io
          kind: StorageCluster
          name: ocs-storagecluster
          namespace: openshift-storage
          jsonPointers:
          - /metadata/ownerReferences

- name: "Wait for the NooBaa instance to be ready (Phase: Ready)"
  kubernetes.core.k8s_info:
    api_version: noobaa.io/v1alpha1
    kind: NooBaa
    name: noobaa
    namespace: openshift-storage
  register: noobaa_instance_info
  until: >
    noobaa_instance_info.resources | length > 0 and
    noobaa_instance_info.resources[0].status is defined and
    noobaa_instance_info.resources[0].status.phase is defined and
    noobaa_instance_info.resources[0].status.phase == 'Ready'
  retries: 90
  delay: 10
  changed_when: false