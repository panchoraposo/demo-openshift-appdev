---
- name: "Create ArgoCD application to install Tempo Operator"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: tempo-operator
        namespace: openshift-gitops
      spec:
        project: default
        source: { repoURL: "{{ gitops_repo }}", targetRevision: main, path: apps/tempo-operator }
        destination: { server: https://kubernetes.default.svc }
        syncPolicy: { automated: { prune: true, selfHeal: true }, syncOptions: [ "CreateNamespace=true" ] }

- name: "Wait for Red Hat Tempo Operator to be ready"
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: "openshift-tempo-operator"
  register: csv_info
  until: >
    (csv_info.resources | selectattr('spec.displayName', 'contains', 'Tempo Operator') | list | length > 0) and
    (csv_info.resources | selectattr('spec.displayName', 'contains', 'Tempo Operator') | list)[0].status.phase == 'Succeeded'
  retries: 40
  delay: 20

- name: "TASK 1: Create an ObjectBucketClaim for Tempo traces"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: objectbucket.io/v1alpha1
      kind: ObjectBucketClaim
      metadata:
        name: "{{ bucket_claim_name }}"
        namespace: "{{ tempo_instance_namespace }}"
      spec:
        storageClassName: "{{ storage_class_name }}"

- name: "TASK 2: Wait for the ObjectBucketClaim to be 'Bound'"
  kubernetes.core.k8s_info:
    api_version: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    name: "{{ bucket_claim_name }}"
    namespace: "{{ tempo_instance_namespace }}"
  register: obc_info
  until: >
    obc_info.resources | length > 0 and
    obc_info.resources[0].status is defined and
    obc_info.resources[0].status.phase == 'Bound'
  retries: 40
  delay: 10

- name: "TASK 3: Extract the name of the generated ConfigMap and Secret"
  ansible.builtin.set_fact:
    generated_cm_secret_name: "{{ obc_info.resources[0].spec.objectBucketName }}"

- name: "TASK 4: Get S3 endpoint details from the generated ConfigMap"
  kubernetes.core.k8s_info:
    kind: ConfigMap
    name: "{{ generated_cm_secret_name }}"
    namespace: "{{ tempo_instance_namespace }}"
  register: ob_cm_info

- name: "TASK 5: Get S3 credentials from the generated Secret"
  kubernetes.core.k8s_info:
    kind: Secret
    name: "{{ generated_cm_secret_name }}"
    namespace: "{{ tempo_instance_namespace }}"
  register: ob_secret_info

- name: "TASK 6: Create the final Secret in the format required by TempoStack"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ tempo_secret_name }}"
        namespace: "{{ tempo_instance_namespace }}"
      type: Opaque
      stringData:
        bucket: "{{ ob_cm_info.resources[0].data.BUCKET_NAME }}"
        endpoint: "{{ ob_cm_info.resources[0].data.BUCKET_HOST }}:{{ ob_cm_info.resources[0].data.BUCKET_PORT }}"
        access_key_id: "{{ ob_secret_info.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}"
        secret_access_key: "{{ ob_secret_info.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}"

- name: "TASK 7: Create ArgoCD Application for the Tempo instance"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: tempo-instance
        namespace: openshift-gitops
      spec:
        project: default
        source:
          repoURL: "{{ gitops_repo_url }}"
          targetRevision: HEAD
          path: "{{ gitops_repo_path }}"
        destination:
          server: https://kubernetes.default.svc
          namespace: "{{ tempo_instance_namespace }}"
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions: